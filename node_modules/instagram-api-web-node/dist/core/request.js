"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
const lodash_1 = require("lodash");
const rxjs_1 = require("rxjs");
const attempt_1 = require("@lifeomic/attempt");
const request = require("request-promise");
const crypto_1 = require("crypto");
const errors_1 = require("../errors");
const JSONbigInt = require("json-bigint");
const JSONbigString = JSONbigInt({ storeAsString: true });
const debug_1 = require("debug");
class Request {
    constructor(client) {
        this.client = client;
        this.end$ = new rxjs_1.Subject();
        this.error$ = new rxjs_1.Subject();
        this.attemptOptions = {
            maxAttempts: 1,
        };
        this.defaults = {};
    }
    static requestTransform(body, response, resolveWithFullResponse) {
        try {
            response.body = JSONbigString.parse(body);
        }
        catch (e) {
            if (lodash_1.inRange(response.statusCode, 200, 299)) {
                throw e;
            }
        }
        return resolveWithFullResponse ? response : response.body;
    }
    async hasOwnProperty(obj, prop) {
        return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    async send(userOptions, onlyCheckHttpStatus) {
        const csrftoken = this.client.state.cookieCsrfToken == "missing" ? this.client.state.csrftoken : this.client.state.cookieCsrfToken;
        if (typeof csrftoken !== "string" || csrftoken === "missing" || csrftoken === null) {
            throw new errors_1.IgCookieNotFoundError("IgCookieNotFoundError");
        }
        const options = lodash_1.defaultsDeep(userOptions, {
            baseUrl: 'https://www.instagram.com',
            uri: '',
            resolveWithFullResponse: true,
            proxy: this.client.state.proxyUrl,
            simple: false,
            transform: Request.requestTransform,
            jar: this.client.state.cookieJar,
            strictSSL: false,
            gzip: true,
            headers: this.getDefaultHeaders(),
            method: 'GET',
        }, this.defaults);
        Request.requestDebug(`Requesting ${options.method} ${options.url || options.uri || '[could not find url]'}`);
        const response = await this.faultTolerantRequest(options);
        this.updateState(response);
        let errors;
        const hasAuth = await this.hasOwnProperty(response.body, "authenticated");
        if (typeof response.body == "object" && response.statusCode == 200) {
            if (hasAuth) {
                if (hasAuth && response.body.authenticated) {
                    return response;
                }
                else if (hasAuth && !response.body.authenticated) {
                    errors = new errors_1.IgLoginBadPasswordError("IgLoginBadPasswordError");
                }
                throw errors;
            }
            return response;
        }
        const error = this.handleResponseError(response);
        process.nextTick(() => this.error$.next(error));
        throw error;
    }
    updateState(response) {
        const { 'x-ig-set-www-claim': wwwClaim, 'ig-set-authorization': auth, 'ig-set-password-encryption-web-key-id': pwKeyId, 'ig-set-password-encryption-web-pub-key': pwPubKey, } = response.headers;
        if (typeof wwwClaim == 'string') {
            this.client.state.igWWWClaim = wwwClaim;
        }
        if (typeof auth == 'string' && !auth.endsWith(':')) {
            this.client.state.authorization = auth;
        }
        if (typeof pwKeyId == 'string') {
            this.client.state.passwordEncryptionKeyId = pwKeyId;
        }
        if (typeof pwPubKey == 'string') {
            this.client.state.passwordEncryptionPubKey = pwPubKey;
        }
    }
    handleResponseError(response) {
        Request.requestDebug(`Request ${response.request.method} ${response.request.uri.path} failed: ${typeof response.body === 'object' ? JSON.stringify(response.body) : response.body}`);
        const json = response.body;
        if (json.spam) {
            return new errors_1.IgActionSpamError(response);
        }
        if (response.statusCode == 404) {
            return new errors_1.IgNotFoundError(response);
        }
        if (response.statusCode == 302) {
            return new errors_1.IgLoginRequiredError(response);
        }
        if (response.statusCode == 401) {
            return new errors_1.IgLoginRequiredError(response);
        }
        if (response.statusCode == 429) {
            return new errors_1.IgRequestsLimitError();
        }
        if (typeof json.message == 'string') {
            if (json.message === 'challenge_required') {
                return new errors_1.IgCheckpointError(response);
            }
            if (json.message === 'user_has_logged_out') {
                return new errors_1.IgLoginRequiredError(response);
            }
            if (json.message === 'login_required') {
                return new errors_1.IgLoginRequiredError(response);
            }
            if (json.message == 'checkpoint_required') {
                return new errors_1.IgCheckpointError(response);
            }
            if (json.message.includes("Your account has been disabled")) {
                return new errors_1.IgInactiveUserError(response);
            }
            if (json.message == 'Please wait a few minutes before you try again.') {
                return new errors_1.IgRequestsLimitError();
            }
        }
        if (json.error_type === 'sentry_block') {
            return new errors_1.IgRequestsLimitError();
        }
        if (json.error_type === 'inactive user') {
            return new errors_1.IgInactiveUserError(response);
        }
        if (json.two_factor_required) {
            return new errors_1.IgLoginTwoFactorRequiredError("IgLoginTwoFactorRequiredError");
        }
        if (json.error_type == 'two_factor_required') {
            return new errors_1.IgLoginTwoFactorRequiredError("IgLoginTwoFactorRequiredError");
        }
        if (json.error_type == 'generic_request_error') {
            return new errors_1.IgRequestsLimitError();
        }
        return new errors_1.IgResponseError(response);
    }
    async faultTolerantRequest(options) {
        try {
            return await attempt_1.retry(async () => request(options), this.attemptOptions);
        }
        catch (err) {
            throw new errors_1.IgNetworkError(err);
        }
    }
    sign(payload) {
        const json = typeof payload === 'object' ? JSON.stringify(payload) : payload;
        const signature = this.signature(json);
        return {
            ig_sig_key_version: '4',
            signed_body: `${signature}.${json}`,
        };
    }
    signature(data) {
        return crypto_1.createHmac('sha256', '9193488027538fd3450b83b7d05286d4ca9599a0f7eeed90d8c85925698a05dc')
            .update(data)
            .digest('hex');
    }
    getDefaultHeaders() {
        return {
            'User-Agent': this.client.state.webUserAgent,
            'accept-language': this.client.state.language,
            'sec-fetch-site': 'same-origin',
            'sec-fetch-mode': 'cors',
            'sec-fetch-dest': 'empty',
            'x-requested-with': 'XMLHttpRequest',
            'X-IG-WWW-Claim': this.client.state.igWWWClaim || '0',
            'x-instagram-ajax': this.client.state.XinstagramAJAX ? this.client.state.XinstagramAJAX : "1",
            'x-asbd-id': 198387,
            'x-csrftoken': this.client.state.cookieCsrfToken || this.client.state.csrftoken,
            'x-ig-app-id': 1217981644879628,
            'origin': 'https://www.instagram.com',
            Referer: this.client.state.host
        };
    }
    async sendAppVersion(userOptions, onlyCheckHttpStatus) {
        var _a;
        const options = lodash_1.defaultsDeep(userOptions, {
            baseUrl: 'https://i.instagram.com/api/v1',
            resolveWithFullResponse: true,
            proxy: this.client.state.proxyUrl,
            simple: false,
            transform: Request.requestTransform,
            jar: this.client.state.cookieJar,
            strictSSL: false,
            gzip: true,
            headers: {
                'User-Agent': this.client.state.appUserAgent,
                'X-Ads-Opt-Out': this.client.state.adsOptOut ? '1' : '0',
                'X-CM-Bandwidth-KBPS': '-1.000',
                'X-CM-Latency': '-1.000',
                'X-IG-App-Locale': "en_US",
                'X-IG-Device-Locale': "en_US",
                'X-Pigeon-Session-Id': this.client.state.pigeonSessionId,
                'X-Pigeon-Rawclienttime': (Date.now() / 1000).toFixed(3),
                'X-IG-Connection-Speed': `${lodash_1.random(1000, 3700)}kbps`,
                'X-IG-Bandwidth-Speed-KBPS': '-1.000',
                'X-IG-Bandwidth-TotalBytes-B': '0',
                'X-IG-Bandwidth-TotalTime-MS': '0',
                'X-IG-EU-DC-ENABLED': typeof this.client.state.euDCEnabled === 'undefined' ? void 0 : this.client.state.euDCEnabled.toString(),
                'X-IG-Extended-CDN-Thumbnail-Cache-Busting-Value': this.client.state.thumbnailCacheBustingValue.toString(),
                'X-Bloks-Version-Id': this.client.state.bloksVersionId,
                'X-MID': (_a = this.client.state.extractCookie('mid')) === null || _a === void 0 ? void 0 : _a.value,
                'X-IG-WWW-Claim': this.client.state.igWWWClaim || '0',
                'X-Bloks-Is-Layout-RTL': this.client.state.isLayoutRTL.toString(),
                'X-IG-Connection-Type': this.client.state.connectionTypeHeader,
                'X-IG-Capabilities': this.client.state.capabilitiesHeader,
                'X-IG-App-ID': this.client.state.fbAnalyticsApplicationId,
                'X-IG-Device-ID': this.client.state.uuid,
                'X-IG-Android-ID': this.client.state.deviceId,
                'Accept-Language': "en-US",
                'X-FB-HTTP-Engine': 'Liger',
                Authorization: this.client.state.authorization,
                Host: 'i.instagram.com',
                'Accept-Encoding': 'gzip',
                Connection: 'close',
            },
            method: 'GET',
        }, this.defaults);
        Request.requestDebug(`Requesting ${options.method} ${options.url || options.uri || '[could not find url]'}`);
        const response = await this.faultTolerantRequest(options);
        this.updateState(response);
        if (response.body.status === 'ok' || (onlyCheckHttpStatus && response.statusCode === 200)) {
            return response;
        }
        const error = this.handleResponseError(response);
        process.nextTick(() => this.error$.next(error));
        throw error;
    }
}
exports.Request = Request;
Request.requestDebug = debug_1.default('ig:request');
//# sourceMappingURL=request.js.map