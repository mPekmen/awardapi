import { AttemptOptions } from '@lifeomic/attempt';
import { Options } from 'request';
import { IgApiClient } from './client';
import { IgResponse } from '../types';
declare type Payload = {
    [key: string]: any;
} | string;
interface SignedPost {
    signed_body: string;
    ig_sig_key_version: string;
}
export declare class Request {
    private client;
    private static requestDebug;
    end$: any;
    error$: any;
    attemptOptions: Partial<AttemptOptions<any>>;
    defaults: Partial<Options>;
    constructor(client: IgApiClient);
    private static requestTransform;
    hasOwnProperty(obj: [], prop: string): Promise<any>;
    send<T = any>(userOptions: Options, onlyCheckHttpStatus?: boolean): Promise<IgResponse<T>>;
    private updateState;
    private handleResponseError;
    protected faultTolerantRequest(options: Options): Promise<any>;
    sign(payload: Payload): SignedPost;
    signature(data: string): string;
    getDefaultHeaders(): {
        'User-Agent': string;
        'accept-language': string;
        'sec-fetch-site': string;
        'sec-fetch-mode': string;
        'sec-fetch-dest': string;
        'x-requested-with': string;
        'X-IG-WWW-Claim': string;
        'x-instagram-ajax': string;
        'x-asbd-id': number;
        'x-csrftoken': string;
        'x-ig-app-id': number;
        origin: string;
        Referer: string;
    };
    sendAppVersion<T = any>(userOptions: Options, onlyCheckHttpStatus?: boolean): Promise<IgResponse<T>>;
}
export {};
